// QUESTION 4: 
// At the neighborhood level, determine whether there is evidence of a relationship between 
// participation in the recycling program and each of the demographic characteristics of 
// educational attainment, household annual income, and incidence of poverty.  Consider residential addresses only.

// import recycling cart dataset
val CIN_tipData = spark.read.format("csv").option("header", true).option("inferSchema", true).load("/user/maria_dev/final/part3/CIN_Recycle_Carts_Tip_Data.csv")
    .withColumn("month", month( to_date($"DATE", "MM/dd/yyy") ) )
    .withColumn("year", year( to_date($"DATE", "MM/dd/yyy") ) )
    
// read in file to map census block groups to neighborhoods (SNAs)
val CIN_censusMap = spark.read.format("csv").option("header", true).option("inferSchema", true).load("/user/maria_dev/final/part3/CIN_2010_CT_BG_flat.csv")
    .withColumn("adjSNA", when( ($"SNA" === "North Avondale" || $"SNA" === "Paddock Hills"), "NORTH AVONDALE - PADDOCK HILLS" ).otherwise(upper($"SNA") ) )
    .drop($"SNA")

// define regex pattern to extract census tract number and block group number
import org.apache.spark.sql.functions.regexp_extract
val tractIDPattern = "(\\d+)[^\\d]+(\\d+[.]\\d+|\\d+)"                                          // https://stackoverflow.com/a/47760162

// import and format educational attainment data (table 15003)
val educationalAttainmentData = spark.read.format("csv").option("header", true).option("inferSchema", true).load("/user/maria_dev/final/part3/ACSDT5Y2018_B15003.csv")
    .filter( !$"NAME".startsWith("Geographic") )
    .withColumnRenamed("B15003_001E", "nEducationalAttainment")
    .withColumnRenamed("B15003_002E", "noSchooling")
    .withColumnRenamed("B15003_003E", "nurserySchool")
    .withColumnRenamed("B15003_004E", "kindergarten")
    .withColumnRenamed("B15003_005E", "grade01")
    .withColumnRenamed("B15003_006E", "grade02")
    .withColumnRenamed("B15003_007E", "grade03")
    .withColumnRenamed("B15003_008E", "grade04")
    .withColumnRenamed("B15003_009E", "grade05")
    .withColumnRenamed("B15003_010E", "grade06")
    .withColumnRenamed("B15003_011E", "grade07")
    .withColumnRenamed("B15003_012E", "grade08")
    .withColumnRenamed("B15003_013E", "grade09")
    .withColumnRenamed("B15003_014E", "grade10")
    .withColumnRenamed("B15003_015E", "grade11")
    .withColumnRenamed("B15003_016E", "grade12_noDiploma")
    .withColumnRenamed("B15003_017E", "regularHighSchoolDiploma")
    .withColumnRenamed("B15003_018E", "GEDorAlternative")
    .withColumnRenamed("B15003_019E", "someCollege_lessThan1Year")
    .withColumnRenamed("B15003_020E", "someCollege_1orMoreYrs_noDegree")
    .withColumnRenamed("B15003_021E", "associatesDegree")
    .withColumnRenamed("B15003_022E", "bachelorsDegree")
    .withColumnRenamed("B15003_023E", "mastersDegree")
    .withColumnRenamed("B15003_024E", "professionalSchoolDegree")
    .withColumnRenamed("B15003_025E", "doctorateDegree")
    .withColumn("blockGroupNo", regexp_extract($"NAME", tractIDPattern, 1) )
    .withColumn("tractNo", regexp_extract($"NAME", tractIDPattern, 2) )
    
// import and format household income data (table 19001)
val householdIncomeData = spark.read.format("csv").option("header", true).option("inferSchema", true).load("/user/maria_dev/final/part3/ACSDT5Y2018_B19001.csv")
    .filter( !$"NAME".startsWith("Geographic") )
    .withColumnRenamed("B19001_001E", "nHouseholdIncome")
    .withColumnRenamed("B19001_002E", "lessthan10000")
    .withColumnRenamed("B19001_003E", "10000to14999")
    .withColumnRenamed("B19001_004E", "15000to19999")
    .withColumnRenamed("B19001_005E", "20000to24999")
    .withColumnRenamed("B19001_006E", "25000to29999")
    .withColumnRenamed("B19001_007E", "30000to34999")
    .withColumnRenamed("B19001_008E", "35000to39999")
    .withColumnRenamed("B19001_009E", "40000to44999")
    .withColumnRenamed("B19001_010E", "45000to49999")
    .withColumnRenamed("B19001_011E", "50000to59999")
    .withColumnRenamed("B19001_012E", "60000to74999")
    .withColumnRenamed("B19001_013E", "75000to99999")
    .withColumnRenamed("B19001_014E", "100000to124999")
    .withColumnRenamed("B19001_015E", "125000to149999")
    .withColumnRenamed("B19001_016E", "150000to199999")
    .withColumnRenamed("B19001_017E", "200000orMore")
    .withColumn("blockGroupNo", regexp_extract($"NAME", tractIDPattern, 1) )
    .withColumn("tractNo", regexp_extract($"NAME", tractIDPattern, 2) )

// import and format educational attainment data (table 17021)
val povertyData = spark.read.format("csv").option("header", true).option("inferSchema", true).load("/user/maria_dev/final/part3/ACSDT5Y2018_B17021.csv")
    .filter( !$"NAME".startsWith("Geographic") )
    .withColumnRenamed("B17021_001E", "nPoverty")
    .withColumnRenamed("B17021_002E", "belowPovertyLevel")
    .withColumnRenamed("B17021_019E", "atAbovePovertyLevel")
    .withColumn("blockGroupNo", regexp_extract($"NAME", tractIDPattern, 1) )
    .withColumn("tractNo", regexp_extract($"NAME", tractIDPattern, 2) )
    
// data frame of all census data grouped by neighborhood
val censusDF = CIN_censusMap
    .join(educationalAttainmentData, educationalAttainmentData("blockGroupNo") <=> CIN_censusMap("BG") && educationalAttainmentData("tractNo") <=> CIN_censusMap("CT") )
    .join(householdIncomeData, householdIncomeData("blockGroupNo") <=> CIN_censusMap("BG") && householdIncomeData("tractNo") <=> CIN_censusMap("CT") )
    .join(povertyData, povertyData("blockGroupNo") <=> CIN_censusMap("BG") && povertyData("tractNo") <=> CIN_censusMap("CT") )
    .groupBy("adjSNA")
    .agg(                                                                               // aggregate sums of individuals/households in each category, sums of individuals/household in each neighborhood
        sum($"nEducationalAttainment").alias("SNA_nEducationalAttainment"),
        sum(
            $"noSchooling" + 
            $"nurserySchool" + 
            $"kindergarten" + 
            $"grade01" +
            $"grade02" +
            $"grade03" +
            $"grade04" +
            $"grade05" +
            $"grade06" +
            $"grade07" +
            $"grade08" +
            $"grade09" +
            $"grade10" +
            $"grade11" +
            $"grade12_noDiploma" +
            $"regularHighSchoolDiploma" +
            $"GEDorAlternative"
        ).alias("SNA_educ_upToHighSchool"),
        sum(
            $"someCollege_lessThan1Year" +
            $"someCollege_1orMoreYrs_noDegree" +
            $"associatesDegree" +
            $"bachelorsDegree"
        ).alias("SNA_educ_upToBachelors"),
        sum(
            $"mastersDegree" +
            $"professionalSchoolDegree" +
            $"doctorateDegree"
        ).alias("SNA_educ_aboveBachelors"),
        sum($"nHouseholdIncome").alias("SNA_nHouseholdIncome"),
        sum(
            $"lessthan10000" +
            $"10000to14999" +
            $"15000to19999" +
            $"20000to24999"
        ).alias("SNA_income_below25000"),
        sum(
            $"25000to29999" +
            $"30000to34999" +
            $"35000to39999"
        ).alias("SNA_income_25000to39999"),
        sum(
            $"40000to44999" +
            $"45000to49999" +
            $"50000to59999" +
            $"60000to74999"
        ).alias("SNA_income_40000to74999"),
        sum(
            $"75000to99999" +
            $"100000to124999" +
            $"125000to149999" +
            $"150000to199999" +
            $"200000orMore"    
        ).alias("SNA_income_above75000"),
        sum($"nPoverty").alias("SNA_nPoverty"),
        sum($"belowPovertyLevel").alias("SNA_belowPovertyLevel"),
        sum($"atAbovePovertyLevel").alias("SNA_atAbovePovertyLevel")
    )
    .orderBy("adjSNA")
    .select(
        $"adjSNA".alias("SNA"), 
        $"SNA_nEducationalAttainment", 
        $"SNA_educ_upToHighSchool", 
        $"SNA_educ_upToBachelors", 
        $"SNA_educ_aboveBachelors",
        $"SNA_nHouseholdIncome",
        $"SNA_income_below25000",
        $"SNA_income_25000to39999",
        $"SNA_income_40000to74999",
        $"SNA_income_above75000",
        $"SNA_nPoverty",
        $"SNA_belowPovertyLevel",
        $"SNA_atAbovePovertyLevel"
    )

// join census data frame to recycling cart tip data
val CIN_joinedDF = CIN_tipData
    .filter($"OESCLASSIFICATION" === "RESIDENTIAL" && $"ADDRESSID".isNotNull && $"NEIGHBORHOOD".isNotNull)      // filter by question criteria and remove invalid data
    .groupBy($"ADDRESSID", $"year", $"month", $"NEIGHBORHOOD")                                                  // group data by address and month
    .agg( sum( $"CARTLIFTS").alias("addMonthTips") )                                                            // aggregate sum of cart tips per month for each address
    .withColumn("addMonthPart", when($"addMonthTips" >= 1, 1).otherwise(0) )                                    // determine monthly participation status for each address
    .withColumn("addRecord", lit(1) )                                                                           // marker to track count of address records
    .groupBy($"NEIGHBORHOOD", $"year", $"month")                                                                // group addresses by neighborhood and month
    .agg( ( sum($"addMonthPart") / sum($"addRecord") ).alias("neighMonthPartRate") )                            // aggregate total participants divided by total addresses
    .groupBy($"NEIGHBORHOOD")                                                                                   // group addresses by neighborhood
    .agg( avg($"neighMonthPartRate").alias("avgNeighborhoodMPR") )                                              // aggregate average monthly participation rates
    .join(censusDF, CIN_tipData("NEIGHBORHOOD") <=> censusDF("SNA"), "left")                                    // join census data frame by neighborhood
    .withColumn("SNA_educ_upToHighSchoolPct", ($"SNA_educ_upToHighSchool" / $"SNA_nEducationalAttainment") )    // calculate neighborhood percentages of individuals/households in each category
    .withColumn("SNA_educ_upToBachelorsPct", ($"SNA_educ_upToBachelors" / $"SNA_nEducationalAttainment") )
    .withColumn("SNA_educ_aboveBachelorsPct", ($"SNA_educ_aboveBachelors" / $"SNA_nEducationalAttainment") )
    .withColumn("SNA_income_below25000Pct", ($"SNA_income_below25000" / $"SNA_nHouseholdIncome") )
    .withColumn("SNA_income_25000to39999Pct", ($"SNA_income_25000to39999" / $"SNA_nHouseholdIncome") )
    .withColumn("SNA_income_40000to74999Pct", ($"SNA_income_40000to74999" / $"SNA_nHouseholdIncome") )
    .withColumn("SNA_income_above75000Pct", ($"SNA_income_above75000" / $"SNA_nHouseholdIncome") )
    .withColumn("SNA_belowPovertyLevelPct", ($"SNA_belowPovertyLevel" / $"SNA_nPoverty") )
    .withColumn("SNA_atAbovePovertyLevelPct", ($"SNA_atAbovePovertyLevel" / $"SNA_nPoverty") )
    
// calculate linear correlation between neighborhood average monthly participation rates and 
// neighborhood percentages of individuals/households in each category
val corr_educ_upToHighSchool = CIN_joinedDF.stat.corr("avgNeighborhoodMPR", "SNA_educ_upToHighSchoolPct" )
val corr_educ_upToBachelors = CIN_joinedDF.stat.corr("avgNeighborhoodMPR", "SNA_educ_upToBachelorsPct" )
val corr_educ_aboveBachelors = CIN_joinedDF.stat.corr("avgNeighborhoodMPR", "SNA_educ_aboveBachelorsPct" )
val corr_income_below25000 = CIN_joinedDF.stat.corr("avgNeighborhoodMPR", "SNA_income_below25000Pct" )
val corr_income_25000to39999 = CIN_joinedDF.stat.corr("avgNeighborhoodMPR", "SNA_income_25000to39999Pct" )
val corr_income_40000to74999 = CIN_joinedDF.stat.corr("avgNeighborhoodMPR", "SNA_income_40000to74999Pct" )
val corr_income_above75000 = CIN_joinedDF.stat.corr("avgNeighborhoodMPR", "SNA_income_above75000Pct" )
val corr_pov_belowPovertyLevel = CIN_joinedDF.stat.corr("avgNeighborhoodMPR", "SNA_belowPovertyLevelPct" )
val corr_pov_abovePovertyLevel = CIN_joinedDF.stat.corr("avgNeighborhoodMPR", "SNA_atAbovePovertyLevelPct" )

// create data frame object of results
import spark.implicits._
val resultsDF = Seq(
        ("Education: up to high school", corr_educ_upToHighSchool),
        ("Education: up to bachelor's degree", corr_educ_upToBachelors),
        ("Education: above bachelor's degree", corr_educ_aboveBachelors),
        ("Income: below $25,0000", corr_income_below25000),
        ("Income: between $25,000 and $39,000", corr_income_25000to39999),
        ("Income: between $40,000 and $75,000", corr_income_40000to74999),
        ("Income: above $75,000", corr_income_above75000),
        ("Poverty: below poverty level", corr_pov_belowPovertyLevel),
        ("Poverty: above poverty level", corr_pov_abovePovertyLevel)
    )
    .toDF("Variable", "Pearson's Correlation Coefficient")

// display results   
resultsDF
    .show(false)
